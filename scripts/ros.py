#!/usr/bin/env python
from __future__ import print_function

import roslib
import sys
import rospy
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from enum import Enum
from array import array

print(cv2.__version__)


class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """
        self.__blur_type = BlurType.Box_Blur
        self.__blur_radius = 5.297297297297298

        self.blur_output = None

        self.__hsv_threshold_input = self.blur_output
        self.__hsv_threshold_hue =        [076, 120]
        self.__hsv_threshold_saturation = [160, 202]
        self.__hsv_threshold_value =      [102, 210]

        self.hsv_threshold_output = None

        self.__find_contours_0_input = self.hsv_threshold_output
        self.__find_contours_0_external_only = False

        self.find_contours_0_output = None

        self.__filter_contours_0_contours = self.find_contours_0_output
        self.__filter_contours_0_min_area = 100.0
        self.__filter_contours_0_min_perimeter = 25.0
        self.__filter_contours_0_min_width = 5.0
        self.__filter_contours_0_max_width = 1000.0
        self.__filter_contours_0_min_height = 0.0
        self.__filter_contours_0_max_height = 1000.0
        self.__filter_contours_0_solidity = [60, 100]
        self.__filter_contours_0_max_vertices = 1000000.0
        self.__filter_contours_0_min_vertices = 0.0
        self.__filter_contours_0_min_ratio = 0.0
        self.__filter_contours_0_max_ratio = 1000.0

        self.filter_contours_0_output = None

        self.__convex_hulls_0_contours = self.filter_contours_0_output

        self.convex_hulls_0_output = None

        self.__rgb_threshold_input = self.blur_output
        self.__rgb_threshold_red =   [  7,  52]
        self.__rgb_threshold_green = [ 69, 106]
        self.__rgb_threshold_blue =  [108, 169]

        self.rgb_threshold_output = None

        self.__find_contours_1_input = self.rgb_threshold_output
        self.__find_contours_1_external_only = False

        self.find_contours_1_output = None

        self.__filter_contours_1_contours = self.find_contours_1_output
        self.__filter_contours_1_min_area = 100.0
        self.__filter_contours_1_min_perimeter = 25.0
        self.__filter_contours_1_min_width = 10.0
        self.__filter_contours_1_max_width = 1000
        self.__filter_contours_1_min_height = 0
        self.__filter_contours_1_max_height = 1000
        self.__filter_contours_1_solidity = [0, 100]
        self.__filter_contours_1_max_vertices = 1000000
        self.__filter_contours_1_min_vertices = 0
        self.__filter_contours_1_min_ratio = 0
        self.__filter_contours_1_max_ratio = 1000

        self.filter_contours_1_output = None

        self.__convex_hulls_1_contours = self.filter_contours_1_output

        self.convex_hulls_1_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Blur0:
        self.__blur_input = source0
        (self.blur_output) = self.__blur(self.__blur_input, self.__blur_type, self.__blur_radius)

        # Step HSV_Threshold0:
        self.__hsv_threshold_input = self.blur_output
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue, self.__hsv_threshold_saturation, self.__hsv_threshold_value)

        # Step Find_Contours0:
        self.__find_contours_0_input = self.hsv_threshold_output
        (self.find_contours_0_output) = self.__find_contours(self.__find_contours_0_input, self.__find_contours_0_external_only)

        # Step Filter_Contours0:
        self.__filter_contours_0_contours = self.find_contours_0_output
        (self.filter_contours_0_output) = self.__filter_contours(self.__filter_contours_0_contours, self.__filter_contours_0_min_area, self.__filter_contours_0_min_perimeter, self.__filter_contours_0_min_width, self.__filter_contours_0_max_width, self.__filter_contours_0_min_height, self.__filter_contours_0_max_height, self.__filter_contours_0_solidity, self.__filter_contours_0_max_vertices, self.__filter_contours_0_min_vertices, self.__filter_contours_0_min_ratio, self.__filter_contours_0_max_ratio)

        # Step Convex_Hulls0:
        self.__convex_hulls_0_contours = self.filter_contours_0_output
        (self.convex_hulls_0_output) = self.__convex_hulls(self.__convex_hulls_0_contours)

        # Step RGB_Threshold0:
        self.__rgb_threshold_input = self.blur_output
        (self.rgb_threshold_output) = self.__rgb_threshold(self.__rgb_threshold_input, self.__rgb_threshold_red, self.__rgb_threshold_green, self.__rgb_threshold_blue)

        # Step Find_Contours1:
        self.__find_contours_1_input = self.rgb_threshold_output
        (self.find_contours_1_output) = self.__find_contours(self.__find_contours_1_input, self.__find_contours_1_external_only)

        # Step Filter_Contours1:
        self.__filter_contours_1_contours = self.find_contours_1_output
        (self.filter_contours_1_output) = self.__filter_contours(self.__filter_contours_1_contours, self.__filter_contours_1_min_area, self.__filter_contours_1_min_perimeter, self.__filter_contours_1_min_width, self.__filter_contours_1_max_width, self.__filter_contours_1_min_height, self.__filter_contours_1_max_height, self.__filter_contours_1_solidity, self.__filter_contours_1_max_vertices, self.__filter_contours_1_min_vertices, self.__filter_contours_1_min_ratio, self.__filter_contours_1_max_ratio)

        # Step Convex_Hulls1:
        self.__convex_hulls_1_contours = self.filter_contours_1_output
        (self.convex_hulls_1_output) = self.__convex_hulls(self.__convex_hulls_1_contours)


    @staticmethod
    def __blur(src, type, radius):
        """Softens an image using one of several filters.
        Args:
            src: The source mat (numpy.ndarray).
            type: The blurType to perform represented as an int.
            radius: The radius for the blur as a float.
        Returns:
            A numpy.ndarray that has been blurred.
        """
        if (type is BlurType.Box_Blur):
            ksize = int(2 * round(radius) + 1)
            return cv2.blur(src, (ksize, ksize))
        elif (type is BlurType.Gaussian_Blur):
            ksize = int(6 * round(radius) + 1)
            return cv2.GaussianBlur(src, (ksize, ksize), round(radius))
        elif (type is BlurType.Median_Filter):
            ksize = int(2 * round(radius) + 1)
            return cv2.medianBlur(src, ksize)
        else:
            return cv2.bilateralFilter(src, -1, round(radius), round(radius))

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
                          min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                          min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x,y,w,h = cv2.boundingRect(contour)
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output

    @staticmethod
    def __rgb_threshold(input, red, green, blue):
        """Segment an image based on color ranges.
        Args:
            input: A BGR numpy.ndarray.
            red: A list of two numbers the are the min and max red.
            green: A list of two numbers the are the min and max green.
            blue: A list of two numbers the are the min and max blue.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2RGB)
        return cv2.inRange(out, (red[0], green[0], blue[0]),  (red[1], green[1], blue[1]))

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        contours, hierarchy = cv2.findContours(input, mode=mode, method=method)
        return contours

    @staticmethod
    def __convex_hulls(input_contours):
        """Computes the convex hulls of contours.
        Args:
            input_contours: A list of numpy.ndarray that each represent a contour.
        Returns:
            A list of numpy.ndarray that each represent a contour.
        """
        output = []
        for contour in input_contours:
            output.append(cv2.convexHull(contour))
        return output


BlurType = Enum('BlurType', 'Box_Blur Gaussian_Blur Median_Filter Bilateral_Filter')


class image_converter:

    def __init__(self):
        print("starting image_converter")

        self.image_pub = rospy.Publisher("/processed_image", Image, queue_size=3)

        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/camera/color/image_raw", Image, self.callback)

        self.processing = GripPipeline()

    def callback(self, data):
        # print("callback")
        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        self.processing.process(cv_image)
        print(len(self.processing.convex_hulls_0_output))
        print(len(self.processing.convex_hulls_1_output))
        #cv2.drawContours(cv_image, self.processing.convex_hulls_0_output, -1, (0,255,0), 3)
        #cv2.drawContours(cv_image, self.processing.convex_hulls_1_output, -1, (255,255,0), 3)

        for c in self.processing.convex_hulls_0_output:
            (x,y),radius = cv2.minEnclosingCircle(c)
            center = (int(x),int(y))
            radius = int(radius)
            cv2.circle(cv_image,center,radius,(0,255,0),2)
            #cv2.putText(cv_image,"Blue Ball", (x,y), cv2.CV_FONT_HERSHEY_SIMPLEX, 2, 255)

        for c in self.processing.convex_hulls_1_output:
            (x,y),radius = cv2.minEnclosingCircle(c)
            center = (int(x),int(y))
            radius = int(radius)
            cv2.circle(cv_image,center,radius,(0,255,0),2)
            #cv2.putText(cv_image,"Blue Ball", (x,y), cv2.CV_FONT_HERSHEY_SIMPLEX, 2, 255)


        cv2.imshow("Image window", cv_image)
        cv2.waitKey(3)

        try:
            self.image_pub.publish(self.bridge.cv2_to_imgmsg(cv_image, "bgr8"))
        except CvBridgeError as e:
            print(e)


def main(args):
    print("starting main")
    ic = image_converter()
    rospy.init_node('image_converter', anonymous=True)
    try:
        print("rospy spin")
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)
